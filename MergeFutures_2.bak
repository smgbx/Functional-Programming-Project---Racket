#lang racket
(require 2htdp/batch-io)

(define (merge A B)
  (cond [(empty? A) B]
        [(empty? B) A]
        [(>= (first A) (first B))
         (cons (first A) (merge (rest A) B))]
        [else
         (cons (first B) (merge A (rest B)))]))

(define (firstHalf L)
  (firstHalfH L (quotient (length L) 2))
  )

(define (firstHalfH L num)
  (if (= 0 num)
      '()
      (cons (first L) (firstHalfH (rest L) (- num 1)))))

(define (secondHalf L)
  (secondHalfH L (quotient (length L) 2))
  )

(define (secondHalfH L num)
  (if (= num 0)
      L
      (secondHalfH (rest L) (- num 1))))
      
(define (mergeSort L)
  (cond [(empty? L) L]
        [(empty? (rest L)) L]
        [else (merge
               (mergeSort (firstHalf L))
               (mergeSort (secondHalf L)))]))

(define (get-numbers filename)
  (map string->number (file->lines filename))
  )

(define (sort-file-numbers filename)
  (mergeSort (get-numbers filename))
  )

(module+ test
  (require rackunit)
  (check-equal? (mergeSort '()) '())
  (check-equal? (mergeSort '(3)) '(3))
  (check-equal? (mergeSort '(3 8)) '(8 3))
  (check-equal? (mergeSort '(10 1 6 2 3 9 8 4 7 5)) '(10 9 8 7 6 5 4 3 2 1))
  (check-equal? (sort-file-numbers "test.txt") '(100 90 80 70 60 50 40 30 20 10))
  )

; List of sorted ints -> file
(define (list->file lst file)
  (display-lines-to-file lst
                         file
                         #:exists 'replace
                         #:mode 'text))


(time
 (list->file (sort-file-numbers "numbers.txt") "output.txt")
 (void))


(define (chunk-into n xs)
  (define N (length xs))
  (cond [(= 1 n) (list xs)]
        [(> n N) 
         (cons empty 
               (chunk-into (sub1 n) xs))]
        [else
         (define m (ceiling (/ N n)))
         (cons (take xs m) 
               (chunk-into (sub1 n) (drop xs m)))]))


(define (f x y)(let ([s (future (lambda () (+ x y)))][d (future (lambda () (- x y)))])(* (touch s) (touch d))))

(define (mrg_srt l)(let ([s (future (lambda () (mergeSort (car l))))][d (future (lambda () (mergeSort (cdr l))))])(mergeSort (cons (touch s) (touch d)))))


(mrg_srt (chunk-into 2 (get-numbers "numbersTest.txt")))
